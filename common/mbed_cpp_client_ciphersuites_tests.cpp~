#include <gtest/gtest.h>

#include "Usage.c"
#include "SslClient.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <exception>

class MbedClient
{

  Options opt;
  SslClient cl; 
  unsigned char psk[MBEDTLS_PSK_MAX_LEN];
  size_t psk_len = 0;
  const char *alpn_list[10];

public:
  MbedClient()
  {  
    memset( (void * ) alpn_list, 0, sizeof( alpn_list ) );
  }

  bool HandleConfiguration(int argc, char** argv)
  {
    return !(this->opt.HandleCliArgs(argc, argv));
  }

  void SetUp()
  {
    int ret = 0;
#if defined(MBEDTLS_DEBUG_C)
    mbedtls_debug_set_threshold( (this->opt).debug_level );
#endif

    if((this->opt).IsCiphersuiteForced())
      ret = (this->opt).HandleCiphersuiteRequest();

    if((this->opt).IsPSKEnabled())
      (this->opt).UnhexifyPSK(this->psk, this->psk_len);

#if defined(MBEDTLS_SSL_ALPN)
    (this->opt).SslAlpn(this->alpn_list);
#endif /* MBEDTLS_SSL_ALPN */
  }

  void Perform()
  {

    try{
      (this->cl).InitRng();
      (this->cl).LoadTrustedCerts(this->opt);
      (this->cl).LoadClientKeys(this->opt);
      (this->cl).StartConnection(this->opt);
      (this->cl).SetupStuff(this->opt, this->alpn_list, this->psk, this->psk_len);
      (this->cl).PerformHandshake(this->opt);
      (this->cl).VerifyServerCert(this->opt);
      (this->cl).SendGet(this->opt);
      (this->cl).ReadResponse(this->opt);
      (this->cl).ReuseConnection(this->opt);
      (this->cl).CloseConnection();
      (this->cl).Reconnect(this->opt);
    }

    catch(...){
      std::cout<<"Exit\n\n";
      throw 1;
    }

    // Shell can not handle large exit numbers -> 1 for errors
    if( ret < 0 )
      ret = 1;
  }
};

TEST(CppClientTest, ClientInit) { 
  MbedClient cl;
  cl.Perform();
}
 
 
int main(int argc, char **argv) {
  testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
